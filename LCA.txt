
N <= 2e5

int bl[N][20] , depth[N];
 
void dfs(int u , int p){
 
     bl[u][0] = p;
     depth[u] = depth[p] + 1;
 
     int h = 1;
     while( (1 << h) <= depth[p] ){
        bl[u][h] = bl[ bl[u][h-1] ][h-1];
        h++;
     }
 
     for(auto v : adj[u]){
         if(v == p)
            continue;
         dfs(v , u);
     }
}
 
int getPBL(int u , int p){
    for(int i = 0; (1 << i) <= p; i++){
        if(p & (1 << i)){
            u = bl[u][i];
        }
    }
    return u;
}
 
int LCA(int u , int v){
    if(depth[u] < depth[v])
        swap(u , v);
    int must = depth[u] - depth[v];
    u = getPBL(u , must);
    if(u == v)
        return u;
    for(int i = 18; ~i; i--){
        if(bl[u][i] != bl[v][i]){
            u = bl[u][i];
            v = bl[v][i];
        }
    }
    return bl[u][0];
}

dfs(1 , 0)

u , v
LCA(u , v) 


